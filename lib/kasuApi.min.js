"use strict";const{load:load}=require("cheerio"),{Parser:Parser}=require("./src/parser"),{log:log,error:error}=require("console"),{connect:connect}=require("http2");let Debug=!1;function debugIteration(t,e){Debug&&console.log(t,+e.toFixed(2))}class Main{#t;constructor(t,e,r){this.url=e||"https://nhentai.net",this.#t,this.IsDiscord=!1,this.blockedWords="",this.ReRollonFail=!1,this.IgnoreNone=!1,this.connection={start:t=>{1==t&&(log("Connection is started!"),log(`Connection: ${this.url}`)),this.#t?console.error("WARN ERROR: Connection is already made."):this.#t=connect(this.url)},close:t=>{if(1==t&&console.log("Connection is closed!"),!this.#t)throw"ERROR: No connection is made.";this.#t.close()}},t&&"start"==t.toLowerCase()&&(1==r&&(conse.log("Connection is started!"),log(`Connection: ${this.url}`)),this.#t=connect(this.url))}#e(t){return Math.random()*t+1<<0}#r(t,e){return t.replace(/ /g,e)}getID(t){if(/https:\/\/nhentai/.test(t)&&!(t=+t.replace(`${this.url}/g/`,"").replace("/","")))throw"ERROR: \n\n            1. You are trying to access a different domain. Please change the URL on the constructor.\n            2. Entered link is Invalid.\n            \n            NOTE: If you are using a full link string please check if the domain matches the URL on the constructor.\n            \n            ";return"number"!=typeof t&&(t=+t),{json:async e=>{const r=await Parser.Shorter(`${this.url}/g/${t}/`,this.IsDiscord,null,null,this.blockedWords,this.IgnoreNone,this.#t);return e?e(r):r}}}async#a(t,e,r,a,s,n){let i,l,c,o;if(a)throw`"${e}", does not exist in the ${s} section!`;try{c=n?randrange(+t("a[class='last']").attr("href").split("&")[1].replace("page=","")):this.#e(+t("a[class='last']").attr("href").replace(`/${s}/${e}/?page=`,""))}catch(t){c=1}l=load(n?await Parser.fetcher(`${this.url}/search/?q=${e}&page=${c}`,this.#t):await Parser.fetcher(`${this.url}/${s}/${e}/?page=${c}`,this.#t)),i=l(`div.index-container>div:nth-child(${this.#e(+l("div.index-container>div>a").length)})>a`).attr("href").slice(3,100).replace("/","");try{return o=await Parser.Shorter(`${this.url}/g/${i}`,this.IsDiscord,this.ReRollonFail,e,this.blockedWords,this.IgnoreNone,this.#t),r?r(o):o}catch(i){if(this.ReRollonFail&&!/DISCORD ToS: REROLL DENIED/.test(i))return this.#a(t,e,r,a,s,n);throw i}}async pRandSpecificTags(t,e){let r;try{t=this.#r(t,"+")}catch(t){}if(/\.net/.test(this.url)&&(r=load(await Parser.fetcher(`${this.url}/search/?q=${t}/`,this.#t)),"No results found"==r("div.index-container>h2").text()))throw this.#t.close(),`"${t}", No results!`;if(/\.to/.test(this.url)&&(r=load(await Parser.fetcher(`${this.url}/search?q=${t}/`,this.#t)),"0 Results"==r("div#content>h2").text()))throw this.#t.close(),`"${t}", No results!`;return this.#a(r,t,e,!1,"",!0)}pRandTag(t,e){return this.#s(t,e,"tag")}pRandParody(t,e){return this.#s(t,e,"parody")}pRandArtist(t,e){return this.#s(t,e,"artist")}pRandGroup(t,e){return this.#s(t,e,"group")}async#n(t,e){return e||(e=""),e=/\.net/.test(this.url)?`${this.url}/${t}/${e}/`:(e=`${this.url}/${t}/${e}`).replace("random/","random"),load(await Parser.fetcher(e,this.#t))}async#s(t,e,r){t=this.#r(t,"-");const a=await this.#n(r,t),s=/404/g.test(a("title").text());return this.#a(a,t,e,s,r,!1)}async pRandom(t){const e=await this.#n("random");let r,a;r=/\.net/.test(this.url)?e("#gallery_id").text().slice(1,100):e(".gallerythumb").attr("href").replace(/\/g\/|\/1\//g,"");try{return a=await Parser.Shorter(`${this.url}/g/${r}`,this.IsDiscord,this.ReRollonFail,null,this.blockedWords,this.IgnoreNone,this.#t),t?t(a):a}catch(e){return this.pRandom(t)}}async pRandID(){const t=await this.#n("random");let e;return e=/\.net/.test(this.url)?t("#gallery_id").text().slice(1,100):t(".gallerythumb").attr("href").replace(/\/g\/|\/1\//g,""),e}async pHomepage(t){return 0!=t&&t||(t=1),await Parser.homePage(t,this.url,this.#t)}async pLanguagePage(t,e){if(/translated|english|japanese|chinese|eng|japan|china|jp/.test(t)){switch(t){case"eng":t="english";break;case"japan":case"jp":t="japanese";break;case"china":t="chinese"}return 0!=e&&e||(e=1),t=`${this.url}/language/${t}/`,await Parser.homePage(e,t,this.#t)}throw this.#t.close(),"ERROR: Invalid language (except: translated) lol"}async pSearch(t,e){try{t=this.#r(t,"+")}catch(t){}let r;return r=/\.to/.test(this.url)?`${this.url}/search?q=${t}&`:`${this.url}/search/?q=${t}&`,0!=e&&e||(e=1),await Parser.homePage(e,r,this.#t)}async pTagPage(t,e){0!=e&&e||(e=1),t=`${this.url}/tag/${t.replace(" ","-")}/`;try{return await Parser.homePage(e,t,this.#t)}catch(t){this.#t.close(),log(t)}}}module.exports=Main;
