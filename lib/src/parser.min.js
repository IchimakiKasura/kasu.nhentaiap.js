"use strict";const{constants:constants,connect:connect}=require("http2"),{log:log}=require("console");let Debug=!1;class fetcher{static options={[constants.HTTP2_HEADER_SCHEME]:"https",[constants.HTTP2_HEADER_METHOD]:constants.HTTP2_METHOD_GET,[constants.HTTP2_HEADER_PATH]:""};static sleep(e){return new Promise((t=>{setTimeout(t,e)}))}static parseURLtoPath(e){let t=new URL(e),a=t.pathname+t.search;return t.host.match(/\.to/)&&a.match(/search/)&&(a=`/${a.replace(/\//g,"")}`),a}static retry(e){return new Promise((t=>{let a="",s="";e.request(this.options).on("response",(async a=>{s=a[":status"],Debug&&log(`[LN32] fetch retry status: ${s}`),s>410&&(await this.sleep(a[":retry-after"]),t(await this.retry(e))),s>300&&s<400&&(this.options[constants.HTTP2_HEADER_PATH]=a.location,t(await this.retry(e)))})).setEncoding("utf8").on("data",(e=>{a+=e})).on("end",(()=>{200==s&&(Debug&&log("[LN46] fetch retry success"),t(a.replace("undefined","")))})).end()}))}static fetcher(e,t){let a=this.parseURLtoPath(e),s="",n="";return this.options[constants.HTTP2_HEADER_PATH]=a,new Promise(((e,a)=>{t||a("ERROR: No connection is made"),t.request(this.options).on("response",(async s=>{n=s[":status"],Debug&&log(`[LN62] fetch status: ${n}`),404==n&&a("No results were found!"),n>410&&(Debug&&log(`[LN65] fetch status: RETRY-AFTER ${s[":retry-after"]}`),await this.sleep(s[":retry-after"]),e(await this.retry(t))),n>300&&n<400&&(this.options[constants.HTTP2_HEADER_PATH]=s.location.replace("https://nhentai.to",""),e(await this.retry(t)))})).setEncoding("utf8").on("data",(e=>{s+=e})).on("end",(()=>{200==n&&(Debug&&log("[LN78] fetch success"),e(s.replace("undefined","")))})).end()}))}}class Matcher extends fetcher{static bookThumbRegex=/<img.*data-src="(?<thumbs>.*?)".*?src=".*?" \/>/;static bookTimeRegex=/<time (.*)>(?<date>.*)<\/time>/;static errorRegex=/<h2>(0|No) [r|R]esults/;static kageBunshinJutsu(e){let t=e.match(this.bookTimeRegex).groups.date,a=e.match(this.bookThumbRegex).groups.thumbs,s=a.replace("/cover.jpg","");return{time:t,thumbnail:a,img_source:s}}static async BOOKInfoMatcherNET(e,t){let a=await this.fetcher(e,t),s=JSON.parse(JSON.parse(`"${a.match(/JSON\.parse\("(?<parse>.*)"\)/).groups.parse}"`)),{time:n,img_source:o,thumbnail:r}=this.kageBunshinJutsu(a);return{body:s,time:n,img_source:o,thumbnail:r}}static async BOOKInfoMatcherTO(e,t){let a=await this.fetcher(e,t),s=JSON.parse(a.replace(/[\r|\n]+| /g,"").match(/N\.gallery\((?<parse>.*?)\);/s).groups.parse.slice(0,-2)+"}"),{time:n,img_source:o,thumbnail:r}=this.kageBunshinJutsu(a);return{body:s,time:n,img_source:o,thumbnail:r}}static async PageInfoMatcher(e,t){let a=await this.fetcher(e,t);if(a.match(this.errorRegex))throw"No results were found";let s="";try{s=a.match(/page=(?<page>.*?)"/g).slice(-1)[0].replace(/\D+/g,"")}catch(e){s=1}return{body:a.match(/<div class="gallery".*?caption">.*?</gs),totalPage:s}}}class Parser extends Matcher{static tagRegex=/https:\/\/nhentai\.(to|net)|\/language|\/tag|\/character|\/artist|\/parody|\/group|\/category|\//g;static URLregex=/language\/.*|tag\/.*|character\/.*|artist\/.*|parody\/.*|group\/.*|category\/.*|(search\/|search\?q=).*|\?q=.*/;static blockedRegex=/lolicon|shotacon|beastiality|torture|minigirl|blood|guro|cannibalism|shota|loli/;static async book(e,t,a){Debug&&log("[LN147] book is called");let s="",n="",o="",r="",i="",c="",l=!1,g="",h=!1,p="",u="",d="",b=!1,m="",f="",y="",T="",k="";if(a&&(k=a.search,l=a["Ignore None"],n=a["Censored Words"],p=a.Discord,b=a["ReRoll on fail"],h=a["Include More"]),n){if("number"==typeof n)throw"ERROR: 'blockedWords' cannot contain such numbers, It must contain strings.";n=n.split(/ |,/g).filter((e=>e)),this.blockedRegex=new RegExp(this.blockedRegex.source.replace("|loli",`|loli|${n.join("|")}`))}try{let a="";a=/\.net/.test(e)?await this.BOOKInfoMatcherNET(e,t):await this.BOOKInfoMatcherTO(e,t),i=a.body,T=a.time,g=a.img_source,y=a.thumbnail}catch(e){return e}for(let e=0;e<i.tags.length;e++)switch(i.tags[e].type){case"tag":if(m+=`${i.tags[e].name}, `,p&&((this.blockedRegex.test(m)||this.blockedRegex.test(k))&&(f="DISCORD ToS: The doujin picked has a Tag that isn't allowed on Discord\n",b&&this.blockedRegex.test(k)&&(f="DISCORD ToS: REROLL DENIED\n")),f))throw f;break;case"charachter":o+=`${i.tags[e].name}, `;break;case"parody":d+=`${i.tags[e].name}, `;break;case"artist":s+=`${i.tags[e].name}, `;break;case"language":c+=`${i.tags[e].name}, `;break;case"category":u+=`${i.tags[e].name}, `}d&&(d=d.slice(0,-2)),o&&(o=o.slice(0,-2)),m&&(m=m.slice(0,-2)),s&&(s=s.slice(0,-2)),c&&(c=c.slice(0,-2)),u&&(u=u.slice(0,-2)),r&&(r=r.slice(0,-2)),/random/.test(e)&&(e=e.replace("random","g/")+i.id);let R={id:i.id,url:e,title:{origin:i.title.japanese.replace(/\[.*?\]|\(.*?\)/g,"").trim(),translated:i.title.english.replace(/\[.*?\]|\(.*?\)/g,"").trim(),originFull:i.title.japanese,translatedFull:i.title.english},images:{cover:y,pages_source:g,pages:e=>e>i.num_pages?`That page doesn't exist!\n The total pages are only '${i.num_pages}'`:`${g}/${e}.jpg`},tag_table:{parodies:d||"none",characters:o||"none",tag:m||"none",artist:s||"none",groups:c||"none",languages:u||"none",categories:r||"none"},favorites:i.num_favorites||"none",number_pages:i.num_pages,uploaded:T};if(l)for(let e of Object.entries(R))if("object"==typeof e[1])for(let e of Object.entries(R.keys[0]))"none"==e[1]&&delete R.keys[0].yet[0];if(h&&/\.net/.test(e)){const a=await this.page(1,e,t);R.MoreLikeThis=a}return Debug&&log("[LN266] return data from book"),R}static async page(e,t,a){Debug&&log("[LN270] page is called"),e&&0!=e||(e=1);let s=`${t}?page=${e}`;/search/.test(t)&&(s=`${t}&page=${e}`);let n=await this.PageInfoMatcher(s,a),o=n.body,r=+n.totalPage,i=[{CurrentUrl:t,typePage:"homepage",CurrentPage:e,Total:o.length,TotalPage:r}];o.forEach((e=>{let a=+e.match(/href="\/g\/(.*?)\/"/)[1],s=e.match(/data-tags="(.*?)"/)[1].split(" "),n="";s.forEach((e=>{if(/\.net/.test(t))switch(e){case"6346":n+="japansese, ";break;case"29963":n+="chinese, ";break;case"12227":n+="english, ";break;case"17249":n+="translated, "}else switch(e){case"2":n+="japansese, ";break;case"10197":n+="chinese, ";break;case"19":n+="english, ";break;case"17":n+="translated, "}})),i.push({id:a,title:e.match(/caption">(.*?)</)[1],thumbnail:e.match(/data-src="(.*?)"/)[1],url:`${t.replace(this.URLregex,"")}g/${a}`,languages:n.slice(0,-2)})}));let c=["language","tag","character","artist","parody","group","category"];for(let e=0;e<c.length;e++)new RegExp(c[e]).test(t)&&(i[0].typePage=`${c[e]} / ${t.replace(this.tagRegex,"")}`);return/search/.test(t)&&(i[0].typePage="search / "+t.replace(/https:\/\/nhentai\.(to|net)\/search|\?q=|\/|&/g,"")),Debug&&log("[LN336] returning data from page"),i}}module.exports=Parser;const process=require("process");(async()=>{let e=process.argv.slice(2);if(!/confirm|build/.test(e))return log("must run on the shell");if(e=e.slice(1),"help"==e[0]&&(log('\n        nhentai [tag | code/ID] [options]\n\n    options:\n        --book          Set "Type" to book. (default\n                        If no type setted)\n        --page          Set "Type" to page. (Will default\n                        if it detects the tags)\n        --block         Add some filter?\n                        (only work if --discord added).\n        --dicord        enable discord. (Will stop the\n                        process if a tag that is in\n                        the list. Originally for\n                        module. CLI is still a\n                        prototype).\n        --raw           show the full [Object].\n                        (Not applicable on --page)\n        --url           only https://nhentai.net\n                        and https://nhentai.to are\n                        accepted.\n        help            show help.\n\n    example for .net (book)\n        nhentai 228922 --raw\n    example for .to (book)\n        nhentai 228922 --raw --url https://nhentai.to\n\n    example for .net (book)\n        nhentai tag/crossdresing --raw --page 1\n    example for .to (book)\n        nhentai characters/astolfo --raw --url https://nhentai.to --page 3\n        '),process.exit(0)),e.length){let t=!1,a="https://nhentai.net",s="",n="",o=0,r=!1,i="";if(e.forEach(((i,c)=>{switch(i){case"--book":n="book";break;case"--page":n="page",o=+e[c+1];break;case"--block":s=e[c+1];break;case"--url":a=e[c+1],/https:\/\/nhentai\.(to|net)/.test(a)||(log("Invalid url"),process.exit(1));break;case"--raw":r=!0;break;case"--discord":t=!0}})),!n){let t=+e.join().replace(/\D+/g,"");/[0-9]/.test(t)?(log('  ‚ö†Ô∏è  "--type" not declared setting default: "book"'),n="book"):(log('  ‚ö†Ô∏è  "--type" not declared setting default: "page"'),n="page")}i="book"==n?`${a}/g/${e[0]}`:`${a}/${e[0]}`;const c=connect(a);if("book"==n)try{let e=await Parser.book(i,c,{"Censored Words":s,Discord:t});log(r?e:`\n    ID:                 ${e.id}\n    üîó:                 ${e.url}\n\n    TITLE JAPANESE:     ${e.title.originFull}\n    TITLE ENGLISH:      ${e.title.translatedFull}\n\n    THUMBNAIL/COVER:    ${e.images.cover}\n    IMAGE SOURCE:       ${e.images.page_source}\n\n    PARODIES:           ${e.tag_table.parodies}\n    CHARACTERS:         ${e.tag_table.characters}\n    TAGS üîû:            ${e.tag_table.tag}\n    ARTISTS:            ${e.tag_table.artist}\n    GROUPS:             ${e.tag_table.groups}\n    LANGUAGES:          ${e.tag_table.languages}\n    CATEGORIES:         ${e.tag_table.categories}\n\n    FAVORITES:          ${e.favorites}\n    üìÉ:                 ${e.number_pages}\n    üìÖ:                 ${e.uploaded}\n                    `)}catch(e){log("  ‚ùó  Invalid ID"),process.exit(1)}else{r&&log('  ‚ö†Ô∏è  "--page" declared! "--raw" is still wip on page command');try{let e=await Parser.page(o,i,c);log(e)}catch(e){log("  ‚ùó  Page number input is above the searched total pages!\n  ‚ùó  Invalid input."),process.exit(1)}}c.close()}})();
